alpha=seq(-3,0,length=J)
beta=rep(1,J)
for (j in 1:J) p[,j]=pexp((theta-alpha[j])/beta[j])
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col="black"
, yaxt = "n")
mtext(side=3,adj=.05,cex=1.2,"A.",line=-1.2)
axis(2, seq(0, 1, .5))
alpha=rep(-2,J)
beta=c(.5,1,2,4)
for (j in 1:J) p[,j]=pexp((theta-alpha[j])/beta[j])
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col="black"
, yaxt = "n")
mtext(side=3,adj=.05,cex=1.2,"B.",line=-1.2)
axis(2, seq(0, 1, .5))
alpha=seq(-2.5,-.5,length=J)
beta=c(.5,1,2,4)
for (j in 1:J) p[,j]=pexp((theta-alpha[j])/beta[j])
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col="black"
, yaxt = "n")
mtext(side=3,adj=.05,cex=1.2,"C.",line=-1.2)
axis(2, seq(0, 1, .5))
alpha=seq(-.5,-2.5,length=J)
beta=c(.5,1,2,4)
for (j in 1:J) p[,j]=pexp((theta-alpha[j])/beta[j])
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col="black"
, yaxt = "n")
mtext(side=3,adj=.05,cex=1.2,"D.",line=-1.2)
axis(2, seq(0, 1, .5))
alpha=seq(-2.5,.5,length=J)
top=seq(1,2,length=J)
for (j in 1:J) p[,j]=punif(theta,alpha[j],top[j])
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col="black"
, yaxt = "n")
mtext(side=3,adj=.05,cex=1.2,"E.",line=-1.2)
axis(2, seq(0, 1, .5))
alpha <- rep(c(3, 5), each = 2)
beta <- seq(.8, 3, length = J)
for (j in 1:J) p[,j]=pgamma(theta,alpha[j],beta[j])
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col=1
, yaxt = "n")
mtext(side=3,adj=.05,cex=1.2,"E.",line=-1.2)
axis(2, seq(0, 1, .5))
layout(matrix(1:6, ncol = 2, byrow = T))
par(mar=c(3,4,1,1),mgp=c(2,.7,0),cex=1)
L=200
J=4
p=matrix(nrow=L,ncol=J)
theta=seq(-4,5,length=L)
alpha=seq(-3,0,length=J)
beta=rep(1,J)
for (j in 1:J) p[,j]=pexp((theta-alpha[j])/beta[j])
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col="black"
, yaxt = "n")
mtext(side=3,adj=.05,cex=1.2,"A.",line=-1.2)
axis(2, seq(0, 1, .5))
alpha=rep(-2,J)
beta=c(.5,1,2,4)
for (j in 1:J) p[,j]=pexp((theta-alpha[j])/beta[j])
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col="black"
, yaxt = "n")
mtext(side=3,adj=.05,cex=1.2,"B.",line=-1.2)
axis(2, seq(0, 1, .5))
alpha=seq(-2.5,-.5,length=J)
beta=c(.5,1,2,4)
for (j in 1:J) p[,j]=pexp((theta-alpha[j])/beta[j])
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col="black"
, yaxt = "n")
mtext(side=3,adj=.05,cex=1.2,"C.",line=-1.2)
axis(2, seq(0, 1, .5))
alpha=seq(-.5,-2.5,length=J)
beta=c(.5,1,2,4)
for (j in 1:J) p[,j]=pexp((theta-alpha[j])/beta[j])
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col="black"
, yaxt = "n")
mtext(side=3,adj=.05,cex=1.2,"D.",line=-1.2)
axis(2, seq(0, 1, .5))
alpha=seq(-2.5,.5,length=J)
top=seq(1,2,length=J)
for (j in 1:J) p[,j]=punif(theta,alpha[j],top[j])
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col="black"
, yaxt = "n")
mtext(side=3,adj=.05,cex=1.2,"E.",line=-1.2)
axis(2, seq(0, 1, .5))
alpha <- rep(c(3, 5), each = 2)
beta <- seq(.8, 3, length = J)
for (j in 1:J) p[,j]=pgamma(theta,alpha[j],beta[j])
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col=1
, yaxt = "n")
mtext(side=3,adj=.05,cex=1.2,"F.",line=-1.2)
axis(2, seq(0, 1, .5))
alpha <- rep(c(3, 5), each = 2)
beta <- seq(.8, 3, length = J)
for (j in 1:J) p[,j] <- alpha[j] * theta^beta[j] / (1 + alpha[j] * theta^beta[j])
pgamma(theta,alpha[j],beta[j])
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col=1
, yaxt = "n")
p[,j]
for (j in 1:J) {
p[,j] <- alpha[j] * theta^beta[j] / (1 + alpha[j] * theta^beta[j])
p[theta < 0, j] <- 0
}
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col=1
, yaxt = "n")
range(p)
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col=1
, yaxt = "n")
mtext(side=3,adj=.05,cex=1.2,"F.",line=-1.2)
axis(2, seq(0, 1, .5))
beta <- seq(.8, 6, length = J)
for (j in 1:J) {
p[,j] <- alpha[j] * theta^beta[j] / (1 + alpha[j] * theta^beta[j])
p[theta < 0, j] <- 0
}
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col=1
, yaxt = "n")
beta <- seq(2, 8, length = J)
for (j in 1:J) {
p[,j] <- alpha[j] * theta^beta[j] / (1 + alpha[j] * theta^beta[j])
p[theta < 0, j] <- 0
}
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col=1
, yaxt = "n")
beta <- seq(1, 4, length = J)
for (j in 1:J) {
p[,j] <- alpha[j] * theta^beta[j] / (1 + alpha[j] * theta^beta[j])
p[theta < 0, j] <- 0
}
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col=1
, yaxt = "n")
beta <- seq(.1, 4, length = J)
for (j in 1:J) {
p[,j] <- alpha[j] * theta^beta[j] / (1 + alpha[j] * theta^beta[j])
p[theta < 0, j] <- 0
}
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col=1
, yaxt = "n")
alpha <- rep(c(1, 5), each = 2)
beta <- seq(.5, 4, length = J)
for (j in 1:J) {
p[,j] <- alpha[j] * theta^beta[j] / (1 + alpha[j] * theta^beta[j])
p[theta < 0, j] <- 0
}
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col=1
, yaxt = "n")
layout(matrix(1:6, ncol = 2, byrow = T))
par(mar=c(3,4,1,1),mgp=c(2,.7,0),cex=1)
L=200
J=4
p=matrix(nrow=L,ncol=J)
theta=seq(-4,5,length=L)
alpha=seq(-3,0,length=J)
beta=rep(1,J)
for (j in 1:J) p[,j]=pexp((theta-alpha[j])/beta[j])
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col="black"
, yaxt = "n")
mtext(side=3,adj=.05,cex=1.2,"A.",line=-1.2)
axis(2, seq(0, 1, .5))
alpha=rep(-2,J)
beta=c(.5,1,2,4)
for (j in 1:J) p[,j]=pexp((theta-alpha[j])/beta[j])
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col="black"
, yaxt = "n")
mtext(side=3,adj=.05,cex=1.2,"B.",line=-1.2)
axis(2, seq(0, 1, .5))
alpha=seq(-2.5,-.5,length=J)
beta=c(.5,1,2,4)
for (j in 1:J) p[,j]=pexp((theta-alpha[j])/beta[j])
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col="black"
, yaxt = "n")
mtext(side=3,adj=.05,cex=1.2,"C.",line=-1.2)
axis(2, seq(0, 1, .5))
alpha=seq(-.5,-2.5,length=J)
beta=c(.5,1,2,4)
for (j in 1:J) p[,j]=pexp((theta-alpha[j])/beta[j])
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col="black"
, yaxt = "n")
mtext(side=3,adj=.05,cex=1.2,"D.",line=-1.2)
axis(2, seq(0, 1, .5))
alpha=seq(-2.5,.5,length=J)
top=seq(1,2,length=J)
for (j in 1:J) p[,j]=punif(theta,alpha[j],top[j])
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col="black"
, yaxt = "n")
mtext(side=3,adj=.05,cex=1.2,"E.",line=-1.2)
axis(2, seq(0, 1, .5))
alpha <- rep(c(1, 5), each = 2)
beta <- seq(.5, 4, length = J)
for (j in 1:J) {
p[,j] <- alpha[j] * theta^beta[j] / (1 + alpha[j] * theta^beta[j])
p[theta < 0, j] <- 0
}
matplot(theta,p,ty='l',lty=1,lwd=1,
xlab="Ability",
ylab="Probability Correct",
col=1
, yaxt = "n")
mtext(side=3,adj=.05,cex=1.2,"F.",line=-1.2)
axis(2, seq(0, 1, .5))
par(mfrow=c(1,3),mar=c(4,3,1,.1),mgp=c(2,.7,0),cex=1)
#Logistic
theta=seq(-5,5,.1)
percentile=seq(.01,.99,.01)
M=length(theta)
N=length(percentile)
p=matrix(ncol=N,nrow=M)
beta=qlnorm(meanlog=logit[3],sdlog=logit[4],p=percentile)
library(papaja)
library(data.table)
library(mirt)
library(rstan)
library(gamlss.dist)
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
rstan_options(auto_write = TRUE)
set.seed(456)
par(mfrow=c(1,3),mar=c(4,3,1,.1),mgp=c(2,.7,0),cex=1)
#Logistic
theta=seq(-5,5,.1)
percentile=seq(.01,.99,.01)
M=length(theta)
N=length(percentile)
p=matrix(ncol=N,nrow=M)
beta=qlnorm(meanlog=logit[3],sdlog=logit[4],p=percentile)
ex=c(-1.5,10,.4,.5)
uni=c(-1.5,10,1,.5)
logit=c(0,10,-.2,.5)
par(mfrow=c(1,3),mar=c(4,3,1,.1),mgp=c(2,.7,0),cex=1)
#Logistic
theta=seq(-5,5,.1)
percentile=seq(.01,.99,.01)
M=length(theta)
N=length(percentile)
p=matrix(ncol=N,nrow=M)
beta=qlnorm(meanlog=logit[3],sdlog=logit[4],p=percentile)
for (n in 1:N) p[,n]=plogis(theta,0,scale=beta[n])
plot(theta,p[,1],typ='n',ylim=c(0,1),
ylab="Probability Correct",xlab="Ability"
, xlim = c(-4, 5)
, axes = F)
for (n in 1:N) lines(theta,p[,n],col=rgb(0,0,0,.1))
axis(1, seq(-4, 4, 4))
axis(2, seq(0, 1, .5))
#Exponential
theta=seq(-3,6,.1)
M=length(theta)
p=matrix(ncol=N,nrow=M)
beta=qlnorm(meanlog=ex[3],sdlog=ex[4],p=percentile)
for (n in 1:N) p[,n]=pexp(theta+1.5,rate=1/beta[n])
plot(theta,p[,1],typ='n',ylim=c(0,1),
ylab="",xlab="Ability"
, xlim = c(-4, 5)
, axes = F)
for (n in 1:N) lines(theta,p[,n],col=rgb(0,0,0,.1))
axis(1, seq(-4, 4, 4))
axis(2, seq(0, 1, .5))
# Uniform
theta=seq(-3,6,.1)
M=length(theta)
p=matrix(ncol=N,nrow=M)
beta=qlnorm(meanlog=uni[3],sdlog=uni[4],p=percentile)
for (n in 1:N) p[,n]=punif(theta,-2,-2+beta[n])
plot(theta,p[,1],typ='n',ylim=c(0,1),
ylab="",xlab="Ability"
, xlim = c(-4, 5)
, axes = F)
for (n in 1:N) lines(theta,p[,n],col=rgb(0,0,0,.1))
axis(1, seq(-4, 4, 4))
axis(2, seq(0, 1, .5))
par(mfrow=c(1,3),mar=c(4,3,1,.1),mgp=c(2,.7,0),cex=1)
#Logistic
theta=seq(-4,5,.1)
percentile=seq(.01,.99,.01)
M=length(theta)
N=length(percentile)
p=matrix(ncol=N,nrow=M)
beta=qlnorm(meanlog=logit[3],sdlog=logit[4],p=percentile)
for (n in 1:N) p[,n]=plogis(theta,0,scale=beta[n])
plot(theta,p[,1],typ='n',ylim=c(0,1),
ylab="Probability Correct",xlab="Ability"
, xlim = c(-4, 5)
, axes = F)
for (n in 1:N) lines(theta,p[,n],col=rgb(0,0,0,.1))
axis(1, seq(-4, 4, 4))
axis(2, seq(0, 1, .5))
#Exponential
theta=seq(-3,6,.1)
M=length(theta)
p=matrix(ncol=N,nrow=M)
beta=qlnorm(meanlog=ex[3],sdlog=ex[4],p=percentile)
for (n in 1:N) p[,n]=pexp(theta+1.5,rate=1/beta[n])
plot(theta,p[,1],typ='n',ylim=c(0,1),
ylab="",xlab="Ability"
, xlim = c(-4, 5)
, axes = F)
for (n in 1:N) lines(theta,p[,n],col=rgb(0,0,0,.1))
axis(1, seq(-4, 4, 4))
axis(2, seq(0, 1, .5))
# Uniform
theta=seq(-3,6,.1)
M=length(theta)
p=matrix(ncol=N,nrow=M)
beta=qlnorm(meanlog=uni[3],sdlog=uni[4],p=percentile)
for (n in 1:N) p[,n]=punif(theta,-2,-2+beta[n])
plot(theta,p[,1],typ='n',ylim=c(0,1),
ylab="",xlab="Ability"
, xlim = c(-4, 5)
, axes = F)
for (n in 1:N) lines(theta,p[,n],col=rgb(0,0,0,.1))
axis(1, seq(-4, 4, 4))
axis(2, seq(0, 1, .5))
par(mfrow=c(1,3),mar=c(4,3,1,.1),mgp=c(2,.7,0),cex=1)
#Logistic
theta=seq(-4,5,.1)
percentile=seq(.01,.99,.01)
M=length(theta)
N=length(percentile)
p=matrix(ncol=N,nrow=M)
beta=qlnorm(meanlog=logit[3],sdlog=logit[4],p=percentile)
for (n in 1:N) p[,n]=plogis(theta,0,scale=beta[n])
plot(theta,p[,1],typ='n',ylim=c(0,1),
ylab="Probability Correct",xlab="Ability"
, xlim = c(-4, 5)
, axes = F)
for (n in 1:N) lines(theta,p[,n],col=rgb(0,0,0,.1))
axis(1, seq(-4, 4, 4))
axis(2, seq(0, 1, .5))
#Exponential
theta=seq(-4,6,.1)
M=length(theta)
p=matrix(ncol=N,nrow=M)
beta=qlnorm(meanlog=ex[3],sdlog=ex[4],p=percentile)
for (n in 1:N) p[,n]=pexp(theta+1.5,rate=1/beta[n])
plot(theta,p[,1],typ='n',ylim=c(0,1),
ylab="",xlab="Ability"
, xlim = c(-4, 5)
, axes = F)
for (n in 1:N) lines(theta,p[,n],col=rgb(0,0,0,.1))
axis(1, seq(-4, 4, 4))
axis(2, seq(0, 1, .5))
# Uniform
theta=seq(-4,6,.1)
M=length(theta)
p=matrix(ncol=N,nrow=M)
beta=qlnorm(meanlog=uni[3],sdlog=uni[4],p=percentile)
for (n in 1:N) p[,n]=punif(theta,-2,-2+beta[n])
plot(theta,p[,1],typ='n',ylim=c(0,1),
ylab="",xlab="Ability"
, xlim = c(-4, 5)
, axes = F)
for (n in 1:N) lines(theta,p[,n],col=rgb(0,0,0,.1))
axis(1, seq(-4, 4, 4))
axis(2, seq(0, 1, .5))
layout(matrix(1:6, ncol = 2, byrow = T))
par(mar=c(3,3,1,.5),mgp=c(1,1,0),cex=1.2)
plotChain(LSAT6fitLogit, 1, leg = T, yrange=c(-8,8), text="Logistic")
## Increase bottom margin to make room for rotated labels
par(mar = c(7, 4, 4, 2) + 0.1)
## Create plot with no x axis and no x axis label
plot(1 : 8, xaxt = "n",  xlab = "")
## Set up x axis with tick marks alone
axis(1, labels = FALSE)
## Create some text labels
labels <- paste("Label", 1:8, sep = " ")
## Plot x axis labels at default tick marks
text(1:8, par("usr")[3] - 0.25, srt = 45, adj = 1,
labels = labels, xpd = TRUE)
## Plot x axis label at line 6 (of 7)
mtext(1, text = "X Axis Label", line = 6)
text(4.5, -1, "test", srt = 90)
text(4.5, -1, "test", srt = 90, xpd = T)
text(4.5, -1, "test", srt = 90, xpd = TRUE)
text(4.5, 9, "test", srt = 90, xpd = TRUE)
text(4.5, 1, "test", srt = 90, xpd = TRUE)
text(-1, 4.5, "test", srt = 90, xpd = TRUE)
text(-1, 4.5, "test", srt = 0, xpd = TRUE)
text(-1, 4.5, "test", srt = 90, xpd = TRUE)
mtext(2, "test")
text(-1, 4.5, "test", srt = 90, xpd = TRUE, line = 0)
mtext(2, "test", line = 0)
mtext(text = "test", side = 2, line = 0)
5.5*1.5
5.5*1.5
yb <- c(0, 30)
seq(yb[1], yb[2], out.length = ol)
ol = 4
seq(yb[1], yb[2], out.length = ol)
?seq
seq(1, 5, out.length = 4)
seq(1, 5, length.out =  = 4)
seq(1, 5, length.out =  4)
seq(1, 5, length.out =  5)
seq(1, 5, length.out =  3)
seq(0, 5, length.out =  4)
seq(0, 4, length.out =  4)
seq(0, 6, length.out =  4)
seq(-1, 6, length.out =  4)
seq(-1, 5, length.out =  4)
seq(-1, 5, length.out =  5)
?plot.default
plot(1:10, xaxt = F)
plot(1:10, xaxt = "n")
axis(1)
seq(-12, -2, 3)
seq(0, 25, 10)
0 + 6.666/2
seq(0, 10, 2)
seq(0, 10, 3)
18.666/3
18.666/3 + 19.666
18.666/2 + 19.666
18.666/2 +1+ 19.666
seq(1, 30, 3)
seq(1, 30, length.out = 3)
seq(1, 30, length.out = 4)
seq(1, 29, length.out = 3)
seq(1, 29, length.out = 5)
seq(-5, 25, 10)
x <- seq(-10, 10, .01)
library(LaplacesDemon)
y <- dst(x, mu = 0, nu = 3, sigma = 10)
?dst
plot(x, y, type = "l")
plot(x, y, type = "l", ylim = c(0, .4))
plot(x, y, type = "l", ylim = c(0, .1))
x <- seq(-100, 100, .01)
y <- dst(x, mu = 0, nu = 3, sigma = 10)
plot(x, y, type = "l", ylim = c(0, .1))
x <- seq(-25, 25, .01)
y <- dst(x, mu = 0, nu = 3, sigma = 5)
plot(x, y, type = "l", ylim = c(0, .1))
y <- dst(x, mu = 0, nu = 3, sigma = 1)
plot(x, y, type = "l", ylim = c(0, .1))
x <- seq(-5, 5, .01)
plot(x, y, type = "l", ylim = c(0, .1))
y <- dst(x, mu = 0, nu = 3, sigma = 1)
plot(x, y, type = "l", ylim = c(0, .1))
plot(x, y, type = "l", ylim = c(0, .3))
plot(x, y, type = "l", ylim = c(0, .4))
